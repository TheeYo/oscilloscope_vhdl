
library IEEE;
use IEEE.std_logic_1164.all;

entity DE1_oscilloscope is
        port( 
				/*      ADC      */
				ADC_CONVST:	out	std_logic;
				ADC_DIN:		out	std_logic;
				ADC_DOUT:	out	std_logic;
				ADC_SCLK:	out	std_logic;

				/*       CLOCK      */
				CLOCK2_50:	in		std_logic;
				CLOCK3_50:	in		std_logic;
				CLOCK4_50:	in		std_logic;
				CLOCK_50:	in		std_logic;

				/*       SEG7      */
				HEX0: out std_logic_vector(6 downto 0);
				HEX1: out std_logic_vector(6 downto 0);
				HEX2: out std_logic_vector(6 downto 0);
				HEX3: out std_logic_vector(6 downto 0);
				HEX4: out std_logic_vector(6 downto 0);
				HEX5: out std_logic_vector(6 downto 0);

				/*       KEY      */
				KEY: in std_logic_vector(3 downto 0);

				/*       LED      */
				LEDR: out std_logic_vector(9 downto 0);

				/*       SW      */
				SW: 	in std_logic_vector(9 downto 0);

				/*       VGA      */
				VGA_BLANK_N: out std_logic;
				VGA_B:	out std_logic_vector(7 downto 0);
				VGA_CLK:	out std_logic;
				VGA_G:	out std_logic_vector(7 downto 0);
				VGA_HS:	out std_logic;
				VGA_R:	out std_logic_vector(7 downto 0);
				VGA_SYNC_N:	out std_logic;
				VGA_VS:	out std_logic;

				/*       GPIO_0, GPIO_0 connect to GPIO Default      */
				GPIO_0: 	inout		std_logic_vector(35 downto 0);

				/*       GPIO_1, GPIO_1 connect to GPIO Default      */
				GPIO_1: 	inout		std_logic_vector(35 downto 0) );
end DE1_oscilloscope;


architecture structure of DE1_oscilloscope is
	signal X, Y : std_logic_vector(9 downto 0);
	signal video_enable : std_logic;
	
begin
	LEDR <= SW;
	
	
	xydisplay : entity work.XYdisplay port map( clk => CLOCK_50, reset => not KEY(0), X => X, Y => Y, video_enable => video_enable,
		                           data_R => "00111111", data_G => Y(7 downto 0), data_B => X(7 downto 0),
		                           VGA_BLANK_N => VGA_BLANK_N, VGA_SYNC_N => VGA_SYNC_N,
		                           VGA_HS => VGA_HS, VGA_VS => VGA_VS,
		                           VGA_R => VGA_R, VGA_G => VGA_G, VGA_B => VGA_B,
		                           VGA_CLK => VGA_CLK );
	
end structure;




/* Original generated system builder code below.

//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_oscilloscope(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================



endmodule
*/
